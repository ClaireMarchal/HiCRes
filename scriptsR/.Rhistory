q()
resdata<-read.table("res_data.txt",header=TRUE)
resdata
slope20kb<-rep(NA,3)
slope20kb[1]<-2*(resdata[2,4]-resdata[1,4])/(resdata[2,2]-resdata[1,2])
slope20kb
scipen=999
slope20kb[1]<-2*(resdata[2,4]-resdata[1,4])/(resdata[2,2]-resdata[1,2])
slope20kb
options(scipen = 999)
slope20kb[1]<-2*(resdata[2,4]-resdata[1,4])/(resdata[2,2]-resdata[1,2])
slope20kb
slope20kb[2]<-2*(resdata[3,4]-resdata[2,4])/(resdata[3,2]-resdata[2,2])
slope20kb[3]<-2*(resdata[3,4]-resdata[1,4])/(resdata[3,2]-resdata[1,2])
slope20kb
var(slope20kb)
var(slope20kb)*slope20kb[1]
var(slope20kb)/slope20kb[1]
slope20kb[1]/var(slope20kb)
test<-c(0.0004,0.00041,0.00039)
test[1]/var(test)
test<-c(0.00004,0.000041,0.000039)
test[1]/var(test)
t.test(slope20kb)
sd(slope20kb)
slope20kb
sds<-sd(slope20kb)
sds>slope20kb[1]*0.01
sds>slope20kb[2]*0.01
sds>slope20kb[3]*0.01
ifelse(sds>slope20kb[1]*0.01|sds>slope20kb[2]*0.01|sds>slope20kb[3]*0.01,print("error"),print("ok"))
ifelse(sds>slope20kb[1]*0.01|sds>slope20kb[2]*0.01,print("error"),print("ok"))
ifelse(sds>slope20kb[1]*0.01||sds>slope20kb[2]*0.01,print("error"),print("ok"))
ifelse(sds>slope20kb[1]*0.01,print("error"),print("ok"))
ifelse(2<1,print("error"),print("ok"))
ifelse(2==1,print("error"),print("ok"))
ifelse(2>1,print("error"),print("ok"))
ifelse(2>1,print("error"),"na")
ifelse(2>1,"error","na")
ifelse(sds>slope20kb[1]*0.01|sds>slope20kb[2]*0.01|sds>slope20kb[3]*0.01,"error","ok")
test_20kb<-ifelse(sds>slope20kb[1]*0.01|sds>slope20kb[2]*0.01|sds>slope20kb[3]*0.01,"error","ok")
slope20M<-rep(NA,3)
resdata
slope20kb[1]<-2*(resdata[4,4]-resdata[1,4])/(resdata[4,3]-resdata[1,3])
slope20kb[2]<-2*(resdata[7,4]-resdata[4,4])/(resdata[7,3]-resdata[4,3])
slope20kb[3]<-2*(resdata[7,4]-resdata[1,4])/(resdata[7,3]-resdata[1,3])
sds<-sd(slope20M)
slope20M[1]<-2*(resdata[4,4]-resdata[1,4])/(resdata[4,3]-resdata[1,3])
slope20M[2]<-2*(resdata[7,4]-resdata[4,4])/(resdata[7,3]-resdata[4,3])
slope20M[3]<-2*(resdata[7,4]-resdata[1,4])/(resdata[7,3]-resdata[1,3])
sds<-sd(slope20M)
sds
slope20M
test_20M<-ifelse(sds>slope20M[1]*0.01|sds>slope20M[2]*0.01|sds>slope20M[3]*0.01,"error","ok")
test_20M
q()
options(scipen = 999)
resdata
equamatrix<-matrix(resdata[1,3]*resdata[1,2]/2,resdata[1,3],resdata[1,2]/2,1,resdata[2,3]*resdata[1,2]/2,resdata[2,3],resdata[1,2]/2,1,resdata[2,3]*resdata[2,2]/2,resdata[2,3],resdata[2,2]/2,1,resdata[1,3]*resdata[2,2]/2,resdata[1,3],resdata[2,2]/2,1,byrow=TRUE)
equamatrix<-matrix(c(resdata[1,3]*resdata[1,2]/2,resdata[1,3],resdata[1,2]/2,1,resdata[2,3]*resdata[1,2]/2,resdata[2,3],resdata[1,2]/2,1,resdata[2,3]*resdata[2,2]/2,resdata[2,3],resdata[2,2]/2,1,resdata[1,3]*resdata[2,2]/2,resdata[1,3],resdata[2,2]/2,1),byrow=TRUE)
 resdata[1, 3] * resdata[1, 2
]
resdata[1,3]
resdata[1,3]*2
resdata[1,3]*resdata[1,2]
resdata[1,2]*2
options(scipen = 0)
equamatrix<-matrix(c(resdata[1,3]*resdata[1,2]/2,resdata[1,3],resdata[1,2]/2,1,resdata[2,3]*resdata[1,2]/2,resdata[2,3],resdata[1,2]/2,1,resdata[2,3]*resdata[2,2]/2,resdata[2,3],resdata[2,2]/2,1,resdata[1,3]*resdata[2,2]/2,resdata[1,3],resdata[2,2]/2,1),byrow=TRUE)
resdata[1,3]*resdata[1,2]
as.numeric(resdata[1,3]*resdata[1,2])
as.numeric(resdata[1,3])*as.numeric(resdata[1,2])
options(scipen = 999)
as.numeric(resdata[1,3])*as.numeric(resdata[1,2])
equamatrix<-matrix(c(as.numeric(resdata[1,3])*as.numeric(resdata[1,2])/2,resdata[1,3],resdata[1,2]/2,1,as.numeric(resdata[2,3])*as.numeric(resdata[1,2])/2,resdata[2,3],resdata[1,2]/2,1,as.numeric(resdata[2,3])*as.numeric(resdata[2,2])/2,resdata[2,3],resdata[2,2]/2,1,as.numeric(resdata[1,3])*as.numeric(resdata[2,2])/2,resdata[1,3],resdata[2,2]/2,1),byrow=TRUE)
equamatrix
equamatrix<-matrix(c(as.numeric(resdata[1,3])*as.numeric(resdata[1,2])/2,resdata[1,3],resdata[1,2]/2,1,as.numeric(resdata[2,3])*as.numeric(resdata[1,2])/2,resdata[2,3],resdata[1,2]/2,1,as.numeric(resdata[2,3])*as.numeric(resdata[2,2])/2,resdata[2,3],resdata[2,2]/2,1,as.numeric(resdata[1,3])*as.numeric(resdata[2,2])/2,resdata[1,3],resdata[2,2]/2,1),byrow=TRUE,nrow=4)
equamatrix
equamatrix<-matrix(c(as.numeric(resdata[1,3])*as.numeric(resdata[1,2])/2,resdata[1,3],resdata[1,2]/2,1,as.numeric(resdata[2,3])*as.numeric(resdata[2,2])/2,resdata[2,3],resdata[2,2]/2,1,as.numeric(resdata[4,3])*as.numeric(resdata[4,2])/2,resdata[4,3],resdata[4,2]/2,1,as.numeric(resdata[5,3])*as.numeric(resdata[5,2])/2,resdata[5,3],resdata[5,2]/2,1),byrow=TRUE,nrow=4)
equamatrix
equasol<-resdata[c(1,2,4,5),4]
equasol
solve(equamatrix,equasol)
coefequa<-solve(equamatrix,equasol)
coefequa
output<-file("equation.txt")
writeLines(c("Resolution = ( 1000 - d - c * (Unique valid pairs)) / ( a * (Unique valid pairs) - b )",paste0("a = ",coefequa[1]),paste0("b = ",coefequa[2]), paste0("c = ",coefequa[3]), paste0("d = ",coefequa[4])), output)
close(output)
q()
resdata
coefequa
options(scipen = 999)
coefequa
percmap<-60
percval<-95
perccis<-80
preseqout<-read.table("preseq_100M_raw_pairs.txt",header=FALSE)
preseqout
names(preseqout)<-c("Sequenced_Pairs","Predicted_Unique_Pairs")
preseqout$Predicted_Unique_Valid_Pairs<-preseqout$Predicted_Unique_Pairs*percmap*percval/10000
preseqout
preseqout$Predicted_Unique_Valid_Cis_Pairs<-preseqout$Predicted_Unique_Valid_Pairs*perccis/100
preseqout
preseqout$Predicted_resolution_all_interactions<-(1000-coefequa[4]-coefequa[3]*preseqout$Predicted_Unique_Valid_Pairs)/(coefequa[1]*preseqout$Predicted_Unique_Valid_Pairs+coefequa[2])
preseqout
preseqout$Predicted_resolution_cis_interactions_only<-(1000-coefequa[4]-coefequa[3]*preseqout$Predicted_Unique_Valid_Cis_Pairs)/(coefequa[1]*preseqout$Predicted_Unique_Valid_Cis_Pairs+coefequa[2])
preseqout
output<-file("predict_res.txt")
write.table
close(output)
write.table(preseqout,"predict_res.txt",sep="\t",quote=FALSE,row.names=FALSE)
name<-"predict_res.txt"
name
gsub(".txt",".png",name)
png(gsub(".txt",".png",name),width=2000,height=2000,pointsize=30)
plot(preseqout[,c(1,5)],ylim=c(0,max(preseqout[,5:6])),xlab="Sequenced read pairs",ylab="Predicted resolution",type="l",col="RED"); par(new=TRUE); plot(preseqout[,c(1,5)],ylim=c(0,max(preseqout[,5:6])),xlab="",ylab="",type="l",col="BLUE"); legend("topright",legend=c("All interactions","Cis interactions only"),col=c("RED","BLUE"),lty=1)
dev.off()
png(gsub(".txt",".png",name),width=1000,height=1000,pointsize=30)
plot(preseqout[,c(1,5)],ylim=c(0,max(preseqout[,5:6])),xlab="Sequenced read pairs",ylab="Predicted resolution",type="l",col="RED"); par(new=TRUE); plot(preseqout[,c(1,6)],ylim=c(0,max(preseqout[,5:6])),xlab="",ylab="",type="l",col="BLUE"); legend("topright",legend=c("All interactions","Cis interactions only"),col=c("RED","BLUE"),lty=1)
dev.off()
?png
png(gsub(".txt",".png",name),width=1000,height=1000,pointsize=30,res=300)
plot(preseqout[,c(1,5)],ylim=c(0,max(preseqout[,5:6])),xlab="Sequenced read pairs",ylab="Predicted resolution",type="l",col="RED"); par(new=TRUE); plot(preseqout[,c(1,6)],ylim=c(0,max(preseqout[,5:6])),xlab="",ylab="",type="l",col="BLUE"); legend("topright",legend=c("All interactions","Cis interactions only"),col=c("RED","BLUE"),lty=1)
dev.off()
png(gsub(".txt",".png",name),width=1000,height=1000,pointsize=30,res=200)
plot(preseqout[,c(1,5)],ylim=c(0,max(preseqout[,5:6])),xlab="Sequenced read pairs",ylab="Predicted resolution",type="l",col="RED"); par(new=TRUE); plot(preseqout[,c(1,6)],ylim=c(0,max(preseqout[,5:6])),xlab="",ylab="",type="l",col="BLUE"); legend("topright",legend=c("All interactions","Cis interactions only"),col=c("RED","BLUE"),lty=1)
dev.off()
png(gsub(".txt",".png",name),width=1000,height=1000,pointsize=30,res=100)
plot(preseqout[,c(1,5)],ylim=c(0,max(preseqout[,5:6])),xlab="Sequenced read pairs",ylab="Predicted resolution",type="l",col="RED"); par(new=TRUE); plot(preseqout[,c(1,6)],ylim=c(0,max(preseqout[,5:6])),xlab="",ylab="",type="l",col="BLUE"); legend("topright",legend=c("All interactions","Cis interactions only"),col=c("RED","BLUE"),lty=1)
dev.off()
png(gsub(".txt",".png",name),width=1000,height=1000,pointsize=30,res=100)
plot(data.frame(preseqout[,1]/1000000,preseqout[,5]),ylim=c(0,max(preseqout[,5:6])),xlab="Sequenced read pairs (M)",ylab="Predicted resolution (bp)",type="l",col="RED"); par(new=TRUE); plot(data.frame(preseqout[,1]/1000000,preseqout[6]),ylim=c(0,max(preseqout[,5:6])),xlab="",ylab="",type="l",col="BLUE"); legend("topright",legend=c("All interactions","Cis interactions only"),col=c("RED","BLUE"),lty=1)
dev.off()
png(gsub(".txt",".png",name),width=1500,height=1000,pointsize=30,res=100)
plot(data.frame(preseqout[,1]/1000000,preseqout[,5]),ylim=c(0,max(preseqout[,5:6])),xlab="Sequenced read pairs (M)",ylab="Predicted resolution (bp)",type="l",col="RED"); par(new=TRUE); plot(data.frame(preseqout[,1]/1000000,preseqout[6]),ylim=c(0,max(preseqout[,5:6])),xlab="",ylab="",type="l",col="BLUE"); legend("topright",legend=c("All interactions","Cis interactions only"),col=c("RED","BLUE"),lty=1)
dev.off()
png(gsub(".txt",".png",name),width=1500,height=1000,pointsize=20,res=200)
plot(data.frame(preseqout[,1]/1000000,preseqout[,5]),ylim=c(0,max(preseqout[,5:6])),xlab="Sequenced read pairs (M)",ylab="Predicted resolution (bp)",type="l",col="RED"); par(new=TRUE); plot(data.frame(preseqout[,1]/1000000,preseqout[6]),ylim=c(0,max(preseqout[,5:6])),xlab="",ylab="",type="l",col="BLUE"); legend("topright",legend=c("All interactions","Cis interactions only"),col=c("RED","BLUE"),lty=1)
dev.off()
png(gsub(".txt",".png",name),width=2000,height=2000,pointsize=20,res=200)
plot(data.frame(preseqout[,1]/1000000,preseqout[,5]),ylim=c(0,max(preseqout[,5:6])),xlab="Sequenced read pairs (M)",ylab="Predicted resolution (bp)",type="l",col="RED"); par(new=TRUE); plot(data.frame(preseqout[,1]/1000000,preseqout[6]),ylim=c(0,max(preseqout[,5:6])),xlab="",ylab="",type="l",col="BLUE"); legend("topright",legend=c("All interactions","Cis interactions only"),col=c("RED","BLUE"),lty=1)
dev.off()
png(gsub(".txt",".png",name),width=2000,height=2000,pointsize=20,res=200)
plot(data.frame(preseqout[,1]/1000000,preseqout[,5]),ylim=c(0,max(preseqout[,5:6])),xlab="Sequenced read pairs (M)",ylab="Predicted resolution (bp)",main="Resolution prediction from sequencing depth",type="l",col="RED"); par(new=TRUE); plot(data.frame(preseqout[,1]/1000000,preseqout[6]),ylim=c(0,max(preseqout[,5:6])),xlab="",ylab="",type="l",col="BLUE"); legend("topright",legend=c("All interactions","Cis interactions only"),col=c("RED","BLUE"),lty=1)
dev.off()
q()
coefequa
q()
preseqout$Predicted_Unique_Pairs*percmap*percval/10000
q()
